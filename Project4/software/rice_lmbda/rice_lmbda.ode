# This is a modified version of hte model by Rice, Wang, Bers, de Tombe.
#Sarcomere length (SL) is removed as a state variable, and replaced by
#fiber stretch lmbda. Accordingly, XB distortions are repalced by
#XB strains

# gotran file generated by cellml2gotran from rice_wang_bers_detombe_2008.cellml
# modified by JS

parameters("Thin filament regulation and crossbridge cycling rates",
           fapp = ScalarParam(0.5, unit="ms**-1"),
           gapp = ScalarParam(0.07, unit="ms**-1"),
           hf = ScalarParam(2, unit="ms**-1"),
           hb = ScalarParam(0.4, unit="ms**-1"),
           gxb = ScalarParam(0.07, unit="ms**-1"),
           gslmod = 6,
           hfmdc = 5,
           hbmdc = 0,
           sigmap = 8,
           sigman = 1,
           xbmodsp = 1,
           Qfapp = 6.25,
           Qgapp = 2.5,
           Qhf = 6.25,
           Qhb = 6.25,
           Qgxb = 6.25)

states("Normalised active and passive force",
       lmbda = 1.9/1.85)

parameters("Normalised active and passive force",
           SLmin = ScalarParam(1.4, unit="um"),
           SLmax = ScalarParam(2.4, unit="um"),
           kxb = ScalarParam(120*1.85, unit="mN*mm**-2"),
           b_ff = 50.0,
           Cp = 0.002,
           SLrest = ScalarParam(1.85, unit="um"),
           SLset = ScalarParam(1.9, unit="um"),
           visc = ScalarParam(3/1.85, unit="ms*um**-2"),
           KSE = ScalarParam(1, unit="um**-1"),
           SEon = 1,
           fixed_afterload = 0)

parameters("Equation for simulated calcium transient",
           tau1 = ScalarParam(20, unit="ms"),
           tau2 = ScalarParam(110, unit="ms"),
           start_time = ScalarParam(5, unit="ms"),
           Ca_amplitude = ScalarParam(1.45, unit="uM"),
           Ca_diastolic = ScalarParam(0.09, unit="uM"))

parameters("Model parameters",
           len_thin = ScalarParam(1.2, unit="um"),
           len_thick = ScalarParam(1.65, unit="um"),
           len_hbare = ScalarParam(0.1, unit="um"),
           TmpC = ScalarParam(24, unit="gradC"),
           eps_0 = 0.003783783) #XB strain =x_0/SLrest

states("Ca binding to troponin to thin filament regulation",
       TRPNCaL = 0.0147730085063734,
       TRPNCaH = 0.13066096561522)

parameters("Ca binding to troponin to thin filament regulation",
           Qkon = 1.5,
           Qkoff = 1.3,
           Qkn_p = 1.6,
           Qkp_n = 1.6,
           kon = ScalarParam(0.05, unit="uM**-1*ms**-1"),
           koffL = ScalarParam(0.25, unit="ms**-1"),
           koffH = ScalarParam(0.025, unit="ms**-1"),
           perm50 = 0.5,
           nperm = 15,
           kn_p = ScalarParam(0.5, unit="ms**-1"),
           kp_n = ScalarParam(0.05, unit="ms**-1"),
           koffmod = 1)

states("Regulation and crossbridge cycling state equations",
       N_NoXB = 0.999999959256274,
       P_NoXB = 4.07437173988636e-8,
       N = 0.999997834540066,
       XBprer = 3.0494964880038e-7,
       XBpostr = 1.81017564383744e-6)

states("Mean strain of strongly bound states",
       lmbda_a = 1.9/1.85)

parameters("Mean strain of strongly bound states",
           xPsi = 4.0) #changed in this version, from 2.0 in original model


component("Sarcomere geometry")
SL = lmbda*SLrest
sovr_ze = Conditional(Lt(len_thick/2, SL/2), len_thick/2, SL/2) # um
sovr_cle = Conditional(Gt(SL/2 - (SL - len_thin), len_hbare/2), SL/2 - (SL - len_thin), len_hbare/2) # um
len_sovr = sovr_ze - sovr_cle # um
SOVFThick = len_sovr*2/(len_thick - len_hbare)
SOVFThin = len_sovr/len_thin


component("Thin filament regulation and crossbridge cycling rates")
eps_xb = 0.5*(lmbda-lmbda_a)   #elastic strain of XBs and filaments

fappT = fapp*xbmodsp*Qfapp**((TmpC - 37)/10) # ms**-1
gapslmd = 1 + (1 - SOVFThick)*gslmod
gappT = gapp*gapslmd*xbmodsp*Qgapp**((TmpC - 37)/10) # ms**-1
hfmd = exp(-sign(eps_xb)*hfmdc*(eps_xb/eps_0)**2)
hbmd = exp(sign(eps_xb)*hbmdc*(eps_xb/eps_0)**2)
hfT = hf*hfmd*xbmodsp*Qhf**((TmpC - 37)/10) # ms**-1
hbT = hb*hbmd*xbmodsp*Qhb**((TmpC - 37)/10) # ms**-1
gxbmd = Conditional(Lt(eps_xb, 0), exp(sigmap*((- eps_xb)/eps_0)**2), exp(sigman*((eps_xb)/eps_0)**2))
gxbT = gxb*gxbmd*xbmodsp*Qgxb**((TmpC - 37)/10) # ms**-1

component("Equation for simulated calcium transient")
beta = (tau1/tau2)**(-1/(tau1/tau2 - 1)) - (tau1/tau2)**(-1/(1 - tau2/tau1))
Cai = Conditional(Gt(time, start_time), (Ca_amplitude - Ca_diastolic)/beta*(exp(-(time - start_time)/tau1) - exp(-(time - start_time)/tau2)) + Ca_diastolic, Ca_diastolic) # uM

component("Ca binding to troponin to thin filament regulation")
konT = kon*Qkon**((TmpC - 37)/10) # uM**-1*ms**-1
koffLT = koffL*koffmod*Qkoff**((TmpC - 37)/10) # ms**-1
koffHT = koffH*koffmod*Qkoff**((TmpC - 37)/10) # ms**-1
dTRPNCaL = konT*Cai*(1 - TRPNCaL) - koffLT*TRPNCaL # ms**-1
dTRPNCaH = konT*Cai*(1 - TRPNCaH) - koffHT*TRPNCaH # ms**-1
Tropreg = (1 - SOVFThin)*TRPNCaL + SOVFThin*TRPNCaH
permtot = sqrt(abs(1/(1 + (perm50/Tropreg)**nperm)))
inprmt = Conditional(Lt(1/permtot, 100), 1/permtot, 100)
dTRPNCaL_dt = dTRPNCaL
dTRPNCaH_dt = dTRPNCaH
kn_pT = kn_p*permtot*Qkn_p**((TmpC - 37)/10) # ms**-1
kp_nT = kp_n*inprmt*Qkp_n**((TmpC - 37)/10) # ms**-1

component("Regulation and crossbridge cycling state equations")
dN_NoXB_dt = kp_nT*P_NoXB - kn_pT*N_NoXB
dP_NoXB_dt = kn_pT*N_NoXB - kp_nT*P_NoXB
dXBpostr = hfT*XBprer - (hbT*XBpostr + gxbT*XBpostr) # ms**-1
P = 1 - N - XBprer - XBpostr
dN_dt = kp_nT*P - kn_pT*N
dXBprer = fappT*P + hbT*XBpostr - (gappT*XBprer + hfT*XBprer) # ms**-1
dXBpostr_dt = dXBpostr
dXBprer_dt = dXBprer


component("Normalised active and passive force")
SSXBpostr = fapp*hf/(fapp*hf + gxb*hf + gxb*gapp + hb*fapp + hb*gapp + gxb*fapp)
Fnordv = kxb*eps_0*SSXBpostr # mN*um*mm**-2
force = kxb*SOVFThick*((eps_xb+eps_0)*XBpostr + eps_xb*XBprer) # mN*um*mm**-2
active = force/Fnordv # 

def passive_parallel_force(l):
    e11 = 0.5*(l**2-1) #Green-Lagrange fiber strain
    CexpW = Cp*exp(b_ff*e11**2)
    return CexpW*b_ff*e11

ppforce = passive_parallel_force(lmbda)
preload = passive_parallel_force(SLset/SLrest)

afterload = Conditional(Eq(SEon, 1), KSE*(SLset - SL), fixed_afterload) # 
total_force = preload+afterload-(ppforce+active)
dlmbda = Conditional(And(Le(SL, SLmax), Gt(SL, SLmin), ), total_force/visc,0)
dlmbda_dt = dlmbda

component("Mean strain of strongly bound states")
dutyfrac = (hfT*fappT + hbT*fappT + gxbT*fappT)/(fappT*hfT + gxbT*hfT + gxbT*gappT + hbT*fappT + hbT*gappT + gxbT*fappT)
dlmbda_a_dt = -2*xPsi/dutyfrac*(fappT*(-0.5*(lmbda-lmbda_a)))



